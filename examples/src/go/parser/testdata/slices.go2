package slices
	
// Map turns a []T1 to a []T2 using a mapping function.
gen Map[T1 type][T2 type] func {
	// The only exported function is used as the output of the generic.
	// NOTE: the name of the declared function is not important,
	//       as long as it is exported.
	func Map(s []T1, f func(T1) T2) []T2 {
		r := make([]T2, len(s))
		for i, v := range s {
			r[i] = f(v)
		}
		
		return r
	}
}

// Reduce reduces a []T1 to a single value using a reduction function.
gen Reduce[T1 type][T2 type] func {
	// The only exported function is used as the output of the generic.
	// NOTE: the name of the declared function is not important,
	//       as long as it is exported.
	func Reduce(s []T1, initializer T2, f func(T2, T1) T2) T2 {
		r := initializer
		for _, v := range s {
			r = f(r, v)
		}
		
		return r
	}
}

// Filter filters values from a slice using a filter function.
gen Filter[T type] func {
	// The only exported function is used as the output of the generic.
	// NOTE: the name of the declared function is not important,
	//       as long as it is exported.
	func Filter(s []T, f func(T) bool) []T {
		var r []T
		for _, v := range s {
			if f(v) {
				r = append(r, v)
			}
		}
		
		return r
	}
}


