package set

gen Set[Elem type] type {
	comparable[Elem] // apply an extra contract

	// The only exported type is used as the output of the generic.
	// NOTE: the name of the declared type is not important,
	//       as long as it is exported.

	type Set map[Elem]struct{}
	func (s Set) Add(v Elem) {
		s[v] = struct{}{}
	}
	func (s Set) Delete(v Elem) {
		delete(s, v)
	}
	func (s Set) Contains(v Elem) bool {
		_, ok := s[v]
			return ok
		}
		func (s Set) Len() int {
		return len(s)
	}
	func (s Set) Iterate(f func(Elem)) {
		for v := range s {
			f(v)
		}
	}
}

gen Make[Elem type] func {
	// The only exported function is used as the output of the generic.
	// NOTE: the name of the declared function is not important,
	//       as long as it is exported.
	func Make() Set[Elem] {
		return make(Set[Elem])
	}
}
	

	
