package orderedmap
	
import "chans"
	
gen Map[K, V type] import {
	
	// For a gen which ouputs an import, all the exported types
	// and functions declared in the gen body will be outputted,
	// their exported names are just their declaration names.
	//
	// For this specified gen, two types and one function will
	// be outputted together in a mini-pacakge.
	// * the New function.
	// * the Map type, which has four exported methods.
	// * the Iterator type, which has one exported method.
	
	type Map struct {
		root    *node
		compare func(K, K) int
	}

	type node struct {
		key         K
		val         V
		left, right *node
	}

	func New(compare func(K, K) int) *Map {
		return &Map{compare: compare}
	}
	
	// find looks up key in the map, and returns either a pointer
	// to the node holding key, or a pointer to the location where
	// such a node would go.
	func (m *Map) find(key K) **node {
		pn := &m.root
		for *pn != nil {
			switch cmp := m.compare(key, (*pn).key); {
			case cmp < 0:
				pn = &(*pn).left
			case cmp > 0:
				pn = &(*pn).right
			default:
				return pn
			}
		}
		return pn
	}

	// Insert inserts a new key/value into the map.
	// If the key is already present, the value is replaced.
	// Returns true if this is a new key, false if already present.
	func (m *Map) Insert(key K, val V) bool {
		pn := m.find(key)
		if *pn != nil {
			(*pn).val = val
			return false
		}
		*pn = &node{key: key, val: val}
		return true
		
	}	

	// Find returns the value associated with a key, or zero if not present.
	// The found result reports whether the key was found.
	func (m *Map) Find(key K) (V, bool) {
		pn := m.find(key)
		if *pn == nil {
			var zero V // see the discussion of zero values, above
			return zero, false
		}
		return (*pn).val, true
	}

	// keyValue is a pair of key and value used when iterating.
	type keyValue struct {
		key K
		val V
	}
	
	// InOrder returns an iterator that does an in-order traversal of the map.
	func (m *Map) InOrder() *Iterator() {
		sender, receiver := chans.Ranger(keyValue)()
		var f func(*node) bool
		f = func(n *node) bool {
			if n == nil {
				return true
			}
			
			// Stop sending values if sender.Send returns false,
			// meaning that nothing is listening at the receiver end.
			return f(n.left) &&
		      		// TODO
			       // sender.Send(keyValue{n.key, n.val}) &&
			       f(n.right)
		}
		
		go func() {
			f(m.root)
			sender.Close()
		}()
		
		return &Iterator{receiver}
	}
	
	// Iterator is used to iterate over the map.
	type Iterator struct {
		r *chans.Receiver(keyValue)
	}
	
	// Next returns the next key and value pair, and a boolean indicating
	// whether they are valid or whether we have reached the end.
	func (it *Iterator) Next() (K, V, bool) {
		keyval, ok := it.r.Next()
		if !ok {
			var zerok K
			var zerov V
			return zerok, zerov, false
		}
		
		return keyval.key, keyval.val, true
	}
}
	

