package p
	
gen List [E type] type {
	// The only exported type is used as the output of the generic.
	// NOTE: the name of the declared type is not important,
	//       as long as it is exported. 
	type List []E
}

/*
Note: by the following changes to the proposal:
* Some simple single output gens can be simplified
  https://github.com/dotaheor/unify-Go-builtin-and-custom-generics#some-somple-single-output-gens-can-be-simplified

the abvoe gen can also be declared as

gen List [E type] []E
*/

var _ list[byte] = []byte{}

gen Tree [E type] type {
	// The only exported type is used as the output of the generic.
	// NOTE: the name of the declared type is not important,
	//       as long as it is exported.
	type Tree struct {
		left, right *Tree
		payload     E
	}
}

/*
Note: by the following changes to the proposal:
* Some simple single output gens can be simplified
  https://github.com/dotaheor/unify-Go-builtin-and-custom-generics#some-somple-single-output-gens-can-be-simplified

the above gen can also be declared as

gen Tree [E type] struct {
	left, right *Tree
	payload     E
}
*/
	
var root1 Tree[int]

var root2 Tree[List[int]]
	
var _ List[List[int]] = []List[int]{}
	
var _ List[List[List[Tree[int]]]] = []List[List[Tree[int]]]{}
